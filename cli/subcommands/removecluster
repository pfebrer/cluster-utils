#!/bin/bash

HOST="$1"

if [ "${HOST}" == "--all" ]; then
	# Go through all the mounted clusters and remove them all

	for host in $(clusterutils lsclusters); do
		clusterutils removecluster "${host}"
	done
	exit 0
fi

# 1. SSH config: Remove from the Host definition to the next empty line
sed -i "/\<Host ${HOST}\>/,/^$/d" ~/.ssh/config
# Make sure we don't leave repeated empty lines
sed -i '/^$/N;/^\n$/D' ~/.ssh/config 

# 2. Clusters YAML: Remove all the config for the host
clusterutils .removeyamlcluster "${HOST}"

# 3. Cluster mountpoint: Remove it if it was set up
MOUNT_POINT="${CLUSTER_UTILS_MOUNTS}/${HOST}"

# If the cluster was mounted then unmmount it
clusterutils unmount "${HOST}"

# Temporarily set the write permissions for the mounts directory
# so that the mount point can be deleted
chmod +w "${CLUSTER_UTILS_MOUNTS}"

# Then, if the cluster mountpoint is empty (succesful unmount), remove it
# NOTE that rmdir fails if the directory is not empty, we should never use rm -r here,
# because it may remove all the files in the cluster!!!!!!!
rmdir "$MOUNT_POINT"

# Then remove write permissions again in case there are more mountpoints
# If there are not, there is nothing to protect, so we will make it easier to
# delete.
if [ ! -z "$(clusterutils lsmounts)"]; then
	chmod -w "${CLUSTER_UTILS_MOUNTS}"
fi
