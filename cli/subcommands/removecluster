#!/bin/bash

HOST="$1"

if [ "${HOST}" == "--all" ]; then
	# Go through all the mounted clusters and remove them all
	for host in $(clusterutils lsclusters); do
		clusterutils removecluster "${host}"
	done
	exit 0
fi

# 1. SSH config: Remove from the Host definition to the next empty line
sed -i "/\<Host ${HOST}\>/,/^$/d" ~/.ssh/config

# 2. Clusters YAML: Remove all the config for the host
clusters_yaml="$(clusterutils path clusters.yaml)"
tmp_file=$(clusterutils path .tmp.clusters.yaml)
awk -v HOST="${HOST}:" 't==1 && $0 ~ /^\S/{t=0}
   $1 == HOST{t=1}
   t != 1' "${clusters_yaml}" > "${tmp_file}"
mv "${tmp_file}" "${clusters_yaml}"

# 3. Cluster mountpoint: Remove it if it was set up
MOUNT_POINT="${CLUSTER_UTILS_MOUNTS}/${HOST}"

# If the cluster was mounted then unmmount it
clusterutils unmount "${HOST}"

# Temporarily set the write permissions for the mounts directory
# so that the mount point can be deleted
chmod +w "${CLUSTER_UTILS_MOUNTS}"

# Then, if the cluster mountpoint is empty (succesful unmount), remove it
# NOTE that rmdir fails if the directory is not empty, we should never use rm -r here,
# because it may remove all the files in the cluster!!!!!!!
rmdir "$MOUNT_POINT"

# Then remove write permissions again
chmod -w "${CLUSTER_UTILS_MOUNTS}"
