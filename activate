#!/bin/bash

# Define the root so that everybody knows how to access files in the cluster-utils package
# To avoid problems with shells other than bash (e.g. zsh, mac's default from now on),
# in install we define the root using $0 and we pass it to this script when we source it.
# Note that we do this because $0 does not contain the path of the file when sourcing
export CLUSTER_UTILS_ROOT=${CLUSTER_UTILS_ROOT:-$(dirname $(realpath ${BASH_SOURCE}))}

# It is EXTREMELY IMPORTANT that we define the following alias, 
# since it will prevent accidental removal of all the files inside a mount.
# Without this protection, if one does "rm -r mounts/" and "mounts" contains 
# a mounted cluster, it would be catastrophic, as it would remove all the
# contents inside a cluster
# Note that we implement the extra protection of removing write permissions
# from the directory where all the mounts are, which will ask you if 
# you are sure to continue your recursive search (check cli/subcommands/mount).
# However, we are only going to do this if the --one-file-system is accepted by
# rm. (accepted by gnu core-utils rm, not necessarily the version that a Mac user has)
_testfile="${CLUSTER_UTILS_ROOT}/.test"
touch "${_testfile}"
if rm --one-file-system "${_testfile}" 2>/dev/null; then
	alias rm="rm --one-file-system"
	# We also define a function that does exactly the same because
	# aliases are not transmitted to child processes, but exported functions do :)
	# Note: we keep the alias because it's the only way of making it work with a
	# sudo call (see below)
	function rm(){ 
		command rm --one-file-system "$@" 
	}
	export -f rm

	# Then we do this little trick so that sudo also sees the alias
	# (check out https://askubuntu.com/a/22043)
	alias sudo="sudo "
else
	rm ${_testfile}
fi

# Source all the scripts so that they can be used
set -a
source "$CLUSTER_UTILS_ROOT"/scripts/{common,commands,job_schedulers}/*.sh
set +a

# Add the bin folder to the path
export PATH="$(_clupath bin):$PATH"

# Provide tab completion for the command line interface (clu)
_clupycomplete

# Define also the place where the user scripts are expected to be
# (can be overwritten)
export CLUSTER_UTILS_USERSCRIPTS=$(_clupath user-scripts)

# Define the name of the host where we are running cluster-utils
export CLUSTER_UTILS_HOST=$(_clugethost)

# Define the place where, by default, cluster-utils will mount clusters
export CLUSTER_UTILS_MOUNTS=$(_clupath mounts)
